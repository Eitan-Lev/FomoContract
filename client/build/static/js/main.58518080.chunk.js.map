{"version":3,"sources":["helpers/verifiers.js","helpers/accounts.js","logo.svg","components/ReadGameTime.js","components/BuyTicket.js","components/SetGameTime.js","components/ReadLastTime.js","components/ReadCurrentWinAmount.js","App.js","serviceWorker.js","index.js","drizzleOptions.js"],"names":["module","exports","checkValueIsNumber","value","match","Temp","Creator","getAccount","name","__webpack_require__","p","ReadGameTime","state","dataKey","this","props","drizzle","contracts","FomoNoCallback","methods","cacheCall","setState","myString","drizzleState","gameTime","react_default","a","createElement","React","Component","verifiers","require","accounts","BuyTicket","stackId","handleKeyDown","e","keyCode","target","_this","BuyTicketMethod","handleSubmit","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","event","wrap","_context","prev","next","preventDefault","stop","_x","apply","arguments","_this$props","buyTicket","cacheSend","from","getTxStatus","_this$props$drizzleSt","transactions","txHash","transactionStack","concat","status","_this2","onSubmit","type","onKeyDown","onChange","SetGameTime","setValue","changeGameTime","ReadLastTime","lastTime","ReadCurrentWinAmount","currentWinAmount","App","loading","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","className","components_ReadLastTime","components_ReadGameTime","components_SetGameTime","components_BuyTicket","components_ReadCurrentWinAmount","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","options","events","MyStringStore","drizzleStore","generateStore","Drizzle","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58518080.chunk.js","sourcesContent":["module.exports = {\n  checkValueIsNumber(value) {\n    var regex=/^[0-9]+$/;\n    return (value && (value).match(regex));\n  }\n};\n","// import React from \"react\";\n//\n// class Accounts extends React.Component {\n//   constructor(props, context) {\n//     super(props)\n//     const { drizzle, drizzleState } = this.props;\n//     // const acount1 = drizzleState.accounts[0]\n//   }\n//   state = { stackId: null, value: null };\n//\n//   account1 = () => {\n//     const { drizzle, drizzleState } = this.props;\n//     return drizzleState.accounts[0];\n//   };\n// }\n//\n// export default Accounts;\nconst Temp = 0, Creator = 1;\n\nmodule.exports = {\n  Temp, Creator,\n  getAccount(name) {\n    switch(name) {\n      case \"creator\":\n        return 1;\n      case \"temp\":\n        return 0;\n      default:\n        return (-1);\n    }\n  }\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass ReadGameTime extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.FomoNoCallback;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods[\"gameTime\"].cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey: dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { FomoNoCallback } = this.props.drizzleState.contracts;\n    // const {events} = FomoNoCallback.events;\n    // TODO\n    // console.log(event);\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = FomoNoCallback.gameTime[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>Game Interval Time is: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadGameTime;\n","import React from \"react\";\nconst verifiers = require('../helpers/verifiers');\nconst accounts = require('../helpers/accounts');\n\nclass BuyTicket extends React.Component {\n  state = { stackId: null, value: null };\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && e.target.value) {\n      const value = this.state.value;\n      if (verifiers.checkValueIsNumber(value)) this.BuyTicketMethod(value);\n    }\n  };\n\n  handleSubmit = e => async event => {\n    event.preventDefault();\n    if (verifiers.checkValueIsNumber(e)) this.BuyTicketMethod(e);\n  };\n\n  BuyTicketMethod = value => {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.FomoNoCallback;\n\n    // let drizzle know we want to call the `set` method with `value`\n    const stackId = contract.methods.buyTicket.cacheSend({\n      // from: drizzleState.accounts[0],\n      from: drizzleState.accounts[accounts.Temp],// TODO\n      value: value\n    });\n\n    // save the `stackId` for later reference\n    this.setState({ stackId: stackId, value: null });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    // otherwise, return the transaction status\n    return `BuyTicket Transaction status: ${transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit(this.state.value)}>\n      <div>\n        Buy Ticket of value: &nbsp;\n        <input\n          type=\"text\"\n          onKeyDown={this.handleKeyDown}\n          onChange={event => this.setState({ value: event.target.value })}\n        />\n        <input type=\"submit\" value=\"Submit\" />\n        <div>{this.getTxStatus()}</div>\n      </div>\n      </form>\n    );\n  }\n  // render() {\n  //   return (\n  //     <div>\n  //       Buy Ticket of value: &nbsp;\n  //       <input\n  //         type=\"text\"\n  //         onKeyDown={this.handleKeyDown}\n  //         />\n  //       <div>{this.getTxStatus()}</div>\n  //     </div>\n  //   );\n  // }\n}\n\nexport default BuyTicket;\n","import React from \"react\";\nconst verifiers = require('../helpers/verifiers');\nconst accounts = require('../helpers/accounts');\n\nclass SetGameTime extends React.Component {\n  state = { stackId: null, value: null };\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && e.target.value) {\n      const value = e.target.value;\n      if (verifiers.checkValueIsNumber(value)) this.setValue(value);\n    }\n  };\n\n  handleSubmit = e => async event => {\n    event.preventDefault();\n    if (verifiers.checkValueIsNumber(e)) this.setValue(e);\n  };\n\n  setValue = value => {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.FomoNoCallback;\n\n    // let drizzle know we want to call the `set` method with `value`\n    const stackId = contract.methods.changeGameTime.cacheSend(value, {\n      // from: drizzleState.accounts[0],\n      from: drizzleState.accounts[accounts.Temp],// TODO\n    });\n\n    // save the `stackId` for later reference\n    this.setState({ stackId: stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    // otherwise, return the transaction status\n    return `Change Game Time Transaction status: ${transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit(this.state.value)}>\n      <div>\n        Set Game Interval Time: &nbsp;\n        <input\n          type=\"text\"\n          onKeyDown={this.handleKeyDown}\n          onChange={event => this.setState({ value: event.target.value })}\n        />\n        <input type=\"submit\" value=\"Submit\" />\n        <div>{this.getTxStatus()}</div>\n      </div>\n      </form>\n    );\n  }\n\n  // render() {\n  //   return (\n  //     <div>\n  //       Set Game Interval Time: &nbsp;\n  //       <input\n  //         type=\"text\"\n  //         onKeyDown={this.handleKeyDown}\n  //         onChange={event =>\n  //           this.setState({ value: event.target.value })\n  //         }\n  //       />\n  //       <div>{this.getTxStatus()}</div>\n  //     </div>\n  //   );\n  // }\n}\n\nexport default SetGameTime;\n","import React from \"react\";\n\nclass ReadLastTime extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.FomoNoCallback;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods.lastTime.cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey: dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { FomoNoCallback } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = FomoNoCallback.lastTime[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>Last Player Time: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadLastTime;\n","import React from \"react\";\n\nclass ReadCurrentWinAmount extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.FomoNoCallback;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods.currentWinAmount.cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey: dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { FomoNoCallback } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = FomoNoCallback.currentWinAmount[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>Current Win Amount: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadCurrentWinAmount;\n","import React, { Component } from 'react';// eslint-disable-next-line\nimport logo from './logo.svg';// eslint-disable-line\nimport './App.css';\nimport ReadGameTime from \"./components/ReadGameTime\";\nimport BuyTicket from \"./components/BuyTicket\";\nimport SetGameTime from \"./components/SetGameTime\";\nimport ReadLastTime from \"./components/ReadLastTime\";\nimport ReadCurrentWinAmount from \"./components/ReadCurrentWinAmount\";\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState: drizzleState });\n      }\n    });\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div className=\"App\">\n        <ReadLastTime\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <ReadGameTime\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <SetGameTime\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <BuyTicket\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <ReadCurrentWinAmount\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import registerServiceWorker from \"./registerServiceWorker\";\nimport * as serviceWorker from './serviceWorker';\n\n\n// import drizzle functions and contract artifact\nimport { Drizzle, generateStore } from \"drizzle\";\n// import MyStringStore from \"./contracts/FomoNoCallback.json\";\nimport drizzleOptions from \"./drizzleOptions\";\n\n// let drizzle know what contracts we want\n// const options = { contracts: [MyStringStore] };\nconst options = drizzleOptions;\n\n// setup the drizzle store and drizzle\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\n// pass in the drizzle instance\nReactDOM.render(<App drizzle={drizzle} />, document.getElementById(\"root\"));\n// ReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n","import MyStringStore from \"./contracts/FomoNoCallback.json\";\n\nconst drizzleOptions = {\n  contracts: [MyStringStore],\n  events: {\n    MyStringStore: ['WinnerAnnouncement']\n  }\n}\n\nexport default drizzleOptions;\n"],"sourceRoot":""}